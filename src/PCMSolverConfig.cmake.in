# PCMSolverConfig.cmake
# ---------------------
#
# PCMSolver cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   PCMSolver_FOUND - true if PCMSolver and all required components found on the system
#   PCMSolver_VERSION - PCMSolver version in format Major.Minor.Release
#   PCMSolver_INCLUDE_DIRS - Directory where the PCMSolver/pcmsolver.h,
#                            PCMSolver/PCMInput.h headers and PCMSolver/pcmsolver.f90 source file are located.
#   PCMSolver_INCLUDE_DIR - same as DIRS
#   PCMSolver_DEFINITIONS: Definitions necessary to use PCMSolver, namely USING_PCMSolver.
#   PCMSolver_LIBRARIES - PCMSolver library to link against.
#   PCMSolver_LIBRARY - same as LIBRARIES
#   PCMSolver_LAUNCHER
#   PCMSolver_EXECUTABLE - path to PCMSolver executable
#   PCMSolver_PYMOD - path to PCMSolver python modules
#
#
# Exported targets:
#
# ::
#
# If PCMSolver is found, this module defines the following :prop_tgt:`IMPORTED`
# target. ::
#
#   PCMSolver::pcm - the main PCMSolver library with header & defs attached.
#
#
# Suggested usage:
#
# ::
#
#   find_package(PCMSolver)
#   find_package(PCMSolver 1.1.7 CONFIG REQUIRED)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   PCMSolver_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_PCMSolver - CMake variable, disables
#       find_package(PCMSolver) perhaps to force internal build

@PACKAGE_INIT@

include("${CMAKE_CURRENT_LIST_DIR}/PCMSolverTargets.cmake")
check_required_components(
  "pcm"
  "run_pcm"
  )

# Set some useful variables
set(PCMSolver_INCLUDE_DIR ${PACKAGE_PREFIX_DIR}/@INSTALL_INCLUDEDIR@)
set(PCMSolver_INCLUDE_DIRS ${PCMSolver_INCLUDE_DIR})
set(PCMSolver_LIBRARY ${PACKAGE_PREFIX_DIR}/@INSTALL_LIBDIR@)
set(PCMSolver_LIBRARIES ${PCMSolver_LIBRARY})
set(PCMSolver_DEFINITIONS USING_PCMSolver)
set(PCMSolver_PYMOD ${PACKAGE_PREFIX_DIR}/@INSTALL_LIBDIR@/@PYMOD_INSTALL_LIBDIR@)
set(PCMSolver_LAUNCHER ${PACKAGE_PREFIX_DIR}/@INSTALL_BINDIR@/go_pcm.py)
set(PCMSolver_EXECUTABLE ${PACKAGE_PREFIX_DIR}/@INSTALL_BINDIR@/run_pcm)

include(CMakeFindDependencyMacro)
if(NOT TARGET ZLIB::ZLIB)
  find_dependency(ZLIB)
endif()
